@namespace BlazorCMS.Client.Components
@using BlazorCMS.Shared.Dtos
@using BlazorCMS.Client.Components.CodeMirror
@using BlazorStrap

<div class="c-editor">
    <input type="text" @bind-value="@Content.Title" @bind-value:event="oninput" class="form-control editor-title-input"/>
    <BSTabGroup class="editor-tabgroup">
        <BSTabList>
            <BSTab>
                <BSTabLabel>Edit</BSTabLabel>
                <BSTabContent>
                    <CodeMirror InitialContent="@(InitialContent?.Body)" OnContentChanged="@OnContentChanged"/>
                    <div class="editor-footer">
                        <button type="button" class="btn btn-primary" disabled="@IsLoading" @onclick="@OnSaveCallback">
                            @if (IsLoading)
                            {
                                <Loading/>
                            }
                            else
                            {
                                <span>Save</span>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" disabled="@IsLoading" @onclick="@OnCancelCallback">Cancel</button>
                    </div>
                </BSTabContent>
            </BSTab>
            <BSTab>
                <BSTabLabel>Preview</BSTabLabel>
                <BSTabContent>
                    <Markdown Content="@Content.Body"/>
                </BSTabContent>
            </BSTab>
        </BSTabList>
        <BSTabSelectedContent/>
    </BSTabGroup>
</div>

@code {

    [Inject]
    private IBlazorCmsJsUtils JsUtils { get; set; }

    [Parameter]
    public ArticleDto InitialContent { get; set; }

    [Parameter]
    public Func<ArticleDto, Task> OnSave { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public Action OnCancel { get; set; }

    private ArticleDto Content { get; set; }

    private void OnSaveCallback() => OnSave(Content);
    private void OnCancelCallback() => OnCancel();

    public void OnContentChanged(string newValue)
    {
        Content.Body = newValue;
    }

    protected override Task OnParametersSetAsync()
    {
        Content       = InitialContent ?? new ArticleDto();
        Content.Body  = Content.Body?.Trim() ?? "";
        Content.Title = Content.Title?.Trim() ?? "";
        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && string.IsNullOrWhiteSpace(InitialContent?.Body))
        {
            JsUtils.Focus(".editor-title-input");
        }
        base.OnAfterRender(firstRender);
    }

}
