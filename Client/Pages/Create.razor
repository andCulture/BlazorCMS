@page "/Section/{SectionId:long}/Create"
@using AndcultureCode.CSharp.Core.Extensions
@using BlazorCMS.Client.Services
@using BlazorCMS.Client.State
@using BlazorCMS.Shared.Dtos
@inherits BlazorState.BlazorStateComponent

@if (Article != null)
{
    <input type="text" @bind-value="@Article.Title" @bind-value:event="oninput" class="form-control"/>
    <Editor InitialContent="@Article.Body" OnSave="@OnSave" OnCancel="@OnCancel" IsLoading="@IsLoading"/>
}

@code {

    [Parameter]
    public long SectionId { get; set; }

    private ArticleDto Article = new ArticleDto();

    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private ArticleService    _articleService;

    private bool IsLoading { get; set; }

    private async Task OnSave(string newContent)
    {
        IsLoading = true;
        Article.Body = newContent;
        var result = await _articleService.Put(Article);
        if (!result.HasErrorsOrResultIsNull())
        {
            Article = result.ResultObject;
            var state = Store.GetState<ClientState>();
            state.Articles = state.Articles.Where(e => e.Id != Article.Id).ToList();
            state.Articles.Add(result.ResultObject);
            Store.SetState(state);
            NavigationManager.NavigateTo($"/Section/{SectionId}/Article/{Article.Id}");
        }

        IsLoading = false;
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task PopulateArticlesForSection()
    {
        // populate all the articles for the section so the nav bar updates properly
        var state                    = Store.GetState<ClientState>();
        state.ExpandedSectionId      = SectionId;
        state.SidebarLoadingArticles = true;
        Store.SetState(state);
        var result = await _articleService.Index(SectionId);
        if (state.Articles == null)
        {
            state.Articles = new List<ArticleDto>();
        }

        state.Articles = state.Articles.Where(e => e.SectionId != SectionId).ToList();
        state.Articles.AddRange(result.ResultObject);
        state.SidebarLoadingArticles = false;
        Store.SetState(state);
    }

    protected override void OnInitialized()
    {
        _articleService = new ArticleService(NavigationManager);
    }

    protected override async Task OnParametersSetAsync()
    {
        var state = Store.GetState<ClientState>();
        state.ExpandedSectionId = SectionId;
        Store.SetState(state);
        await PopulateArticlesForSection();
    }

}
