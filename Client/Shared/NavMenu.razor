@using System.Text.RegularExpressions
@using AndcultureCode.CSharp.Core.Extensions
@using BlazorCMS.Client.Services
@using BlazorCMS.Client.State
@using BlazorCMS.Shared.Dtos
@inherits BlazorState.BlazorStateComponent

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorCMS</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        @foreach (var section in Sections)
        {
            <li class="nav-item px-3">
                <span @onclick="@(() => LoadArticlesForSections(section.Id))">
                    <NavLink class="nav-link">
                        <span class="oi oi-book" aria-hidden="true"></span> @section.Name
                    </NavLink>
                </span>
                @if (ExpandedSectionId == section.Id)
                {
                    @if (_expandedSectionArticles == null || _isLoadingArticles)
                    {
                        <Loading Light="@true"/>
                    }
                    else
                    {
                        <ul class="nav flex-column sub-menu">
                            @foreach (var article in _expandedSectionArticles)
                            {
                                <li class="nav-item px-3">
                                    <NavLink class="nav-link" href="@($"/Section/{section.Id}/Article/{article.Id}")">
                                        <span class="oi oi-justify-left" aria-hidden="true"></span> @article.Title
                                    </NavLink>
                                </li>
                            }
                            <li class="nav-item px-3">
                                <button type="button" class="btn btn-success w-100" @onclick="@(() => Create(section.Id))">
                                    Create Article&nbsp;<i class="oi oi-plus"></i>
                                </button>
                            </li>
                        </ul>
                    }
                }
            </li>
        }
    </ul>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private SectionService    _sectionService;
    private ArticleService    _articleService;
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private long ExpandedSectionId
    {
        get => Store.GetState<ClientState>().ExpandedSectionId;
        set
        {
            var state = Store.GetState<ClientState>();
            state.ExpandedSectionId = value;
            Store.SetState(state);
        }
    }

    private List<ArticleDto> _expandedSectionArticles = null;
    private bool             _isLoadingArticles       = false;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<SectionDto> Sections => Store.GetState<ClientState>().Sections;

    private void Create(long sectionId)
    {
        NavigationManager.NavigateTo($"/Section/{sectionId}/Create");
    }

    private async Task LoadArticlesForSections(long sectionId)
    {
        // if clicked from the already expanded section, collapse it
        if (sectionId == ExpandedSectionId)
        {
            ExpandedSectionId       = -1;
            _expandedSectionArticles = null;
            _isLoadingArticles       = false;
            return;
        }

        ExpandedSectionId = sectionId;
        _isLoadingArticles = true;

        var existingArticles = Store.GetState<ClientState>().Articles?.Where(e => e.SectionId == sectionId)?.ToList();
        if (existingArticles != null && existingArticles.Any())
        {
            _expandedSectionArticles = existingArticles;
            _isLoadingArticles       = false;
            return;
        }

        var result = await _articleService.Index(ExpandedSectionId);
        if (result.HasErrorsOrResultIsNull())
        {
            _expandedSectionArticles = new List<ArticleDto>();
            _isLoadingArticles       = false;
            return;
        }
        _expandedSectionArticles = result.ResultObject.ToList();
        _isLoadingArticles       = false;

        // update shared state
        var state = Store.GetState<ClientState>();
        if (state.Articles == null)
        {
            state.Articles = new List<ArticleDto>();
        }
        state.Articles.AddRange(result.ResultObject);
    }

    private async Task LoadSections()
    {
        var result = await _sectionService.Index();
        var state = Store.GetState<ClientState>();
        state.Sections = result.ResultObject?.ToList() ?? new List<SectionDto>();
        Store.SetState(state);
    }

    protected override async Task OnInitializedAsync()
    {
        _sectionService = new SectionService(NavigationManager);
        _articleService = new ArticleService(NavigationManager);
        await LoadSections();
    }

}
