@page "/Section/{SectionId:long}/Article/{ArticleId:long}/Edit"
@using AndcultureCode.CSharp.Core.Extensions
@using BlazorCMS.Client.Services
@using BlazorCMS.Client.State
@using BlazorCMS.Shared.Dtos
@inherits BlazorState.BlazorStateComponent

@if (Article != null)
{
    <h1>Editing: @Article.Title</h1>
    <Editor InitialContent="@Article.Body" OnSave="@OnSave" OnCancel="@OnCancel" IsLoading="@IsLoading"/>
}

@code {

    [Parameter]
    public long ArticleId { get; set; }

    [Parameter]
    public long SectionId { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
    private ArticleService    _articleService;

    private bool IsLoading { get; set; }

    private ArticleDto Article => Store.GetState<ClientState>()?.Articles?.FirstOrDefault(e => e.Id == ArticleId);

    private async Task OnSave(string newContent)
    {
        IsLoading = true;
        var article = Article;
        article.Body = newContent;
        var result = await _articleService.Post(article);
        var state = Store.GetState<ClientState>();
        state.ExpandedSectionId = SectionId;
        Store.SetState(state);
        if (!result.HasErrorsOrResultIsNull())
        {
            state.Articles = state.Articles.Where(e => e.Id != article.Id).ToList();
            state.Articles.Add(article);
            Store.SetState(state);
            NavigationManager.NavigateTo($"/Section/{SectionId}/Article/{ArticleId}");
        }

        IsLoading = false;
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo($"/Section/{SectionId}/Article/{ArticleId}");
    }

    protected override void OnInitialized()
    {
        _articleService = new ArticleService(NavigationManager);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Article == null)
        {
            // populate all the articles for the section so the nav bar updates properly
            var state                    = Store.GetState<ClientState>();
            state.ExpandedSectionId      = SectionId;
            state.SidebarLoadingArticles = true;
            var result = await _articleService.Index(SectionId);
            if (state.Articles == null)
            {
                state.Articles = new List<ArticleDto>();
            }

            state.Articles = state.Articles.Where(e => e.SectionId != SectionId).ToList();
            state.Articles.AddRange(result.ResultObject);
            state.SidebarLoadingArticles = false;
            Store.SetState(state);
        }
    }

}
