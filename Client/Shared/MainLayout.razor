@using BlazorCMS.Client.Services
@using Blazored.Toast.Configuration
@inherits LayoutComponentBase

<div class="sidebar">
    <NavMenu @ref="@_navMenu"/>
</div>

<div class="main">
    <div class="top-row px-4">
        <a href="https://github.com/andCulture/BlazorCMS" class="mr-md-auto" target="_blank">GitHub Repo</a>
        @if (!IsLoginScreen)
        {
            <button type="button" class="btn btn-primary ml-md-auto" @onclick="@Logout">Logout</button>
        }
    </div>

    <div class="content px-4">
        @if (_initialized)
        {
            @Body
        }
        else
        {
            <Loading/>
        }
    </div>
</div>

<BlazoredToasts Position="@ToastPosition.BottomRight"/>

@code {

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IToastService ToastService { get; set; }

    private UserService _userService;

    private bool _initialized = false;

    private NavMenu _navMenu;

    private bool IsLoginScreen => NavigationManager.Uri == NavigationManager.BaseUri ||
                                    NavigationManager.Uri == $"{NavigationManager.BaseUri}#" ||
                                    NavigationManager.Uri == $"{NavigationManager.BaseUri}/#";

    private async Task Logout()
    {
        var result = await _userService.Logout();
        if (result.HasErrorsOrResultIsNull())
        {
            ToastService.ShowError("Failed to log out.");
            return;
        }

        _navMenu.OnLogout();
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        _userService = new UserService(NavigationManager);
        var currentUserResult = await _userService.GetCurrentUser();
        if (currentUserResult.HasErrorsOrResultIsNull())
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _navMenu.CurrentUser = currentUserResult.ResultObject;
        }

        _initialized = true;
        this.StateHasChanged();
    }

}
