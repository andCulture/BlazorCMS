@using System.Text

<div id="@Model.Id" style="@GetStyleString()"></div>

@code {

    [Inject]
    private IJSRuntime JsRuntime { get; set; }

    [Parameter]
    public EditorModel Model { get; set; }

    [Parameter]
    public string Width { get; set; } = "800px";

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public bool FullScreen { get; set; }

    [Parameter]
    public Action<string> OnContentChange { get; set; }

    private bool _alreadyRendered = false;

    private string GetStyleString()
    {
        if (FullScreen)
        {
            var builder = new StringBuilder();
            builder.Append("width: 100%;");
            builder.Append(!string.IsNullOrWhiteSpace(Height) ? $" height: {Height};" : " height: 100vh;");
            builder.Append(" display: flex;");
            return builder.ToString();
        }

        if (string.IsNullOrWhiteSpace(Height))
        {
            Height = "600px";
        }

        if (string.IsNullOrWhiteSpace(Width))
        {
            Width = "800px";
        }

        return $"width: {Width}; height: {Height}; border: 1px solid #A4A4A4;";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_alreadyRendered || firstRender)
        {
            _alreadyRendered = await MonacoJsInterop.InitializeEditor(JsRuntime, Model);
            if (OnContentChange != null)
            {
                await MonacoJsInterop.OnContentChange(JsRuntime, DotNetObjectReference.Create(this), Model.Id, nameof(Monaco__OnContentChangeCallback));
            }
        }
    }

    [JSInvokable]
    public async Task Monaco__OnContentChangeCallback()
    {
        if (OnContentChange != null)
        {
            var value = await GetValue();
            OnContentChange(value);
        }
    }

    public async Task<string> GetValue()
    {
        return await MonacoJsInterop.GetValue(JsRuntime, Model.Id);
    }

    public async Task<bool> SetValue(string newValue)
    {
        return await MonacoJsInterop.SetValue(JsRuntime, Model.Id, newValue);
    }

    public async Task<bool> SetTheme(string newTheme)
    {
        return await MonacoJsInterop.SetTheme(JsRuntime, Model.Id, newTheme);
    }
}
